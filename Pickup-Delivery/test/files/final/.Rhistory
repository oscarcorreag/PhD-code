library(data.table)
library(ggplot2)
setwd("C:/Users/oscarcg/Documents/phd/code/Pickup-Delivery/test/files/final/")
# setwd("./final")
my_theme_11 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 1),
legend.position      = c(1, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 10, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_10 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 0),
legend.position      = c(1, 0),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 10, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_01 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(0, 1),
legend.position      = c(0, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 10, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_00 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(0, 0),
legend.position      = c(0, 0),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 10, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_none <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 1),
#legend.position      = c(1, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 10, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
ird <- fread("Customers.csv")
ird[, Assignment := as.factor(Assignment)]
ird[, Partition := as.factor(Partition)]
ird[, Routing := as.factor(Routing)]
ird[, Zone := as.factor(Zone)]
ird[, Customers := as.factor(Customers)]
ird[, Ratio := as.factor(Ratio)]
ird[, Distribution := as.factor(Distribution)]
ird[, Limit := as.factor(Limit)]
ird[, Parameter := as.factor(Parameter)]
ird <- ird[Dedicated.cost == 0 & Cost != -1]
ird[Assignment == 'SP-Voronoi', Assignment := 'V']
ird[Assignment == 'LL-EP', Assignment := 'DIST(ra)']
ird[Routing == 'BB', Routing := 'BnB']
ird[, Approach := paste(Assignment, Routing, sep = "-")]
ird$Approach <- factor(ird$Approach, levels = c('V-NN', 'DIST(ra)-NN', 'V-BnB', 'DIST(ra)-BnB'))
ird[, Total.service.cost := Dedicated.cost + Service.cost]
View(ird)
