# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 1),
legend.position      = c(1, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
p_lim_c <- ggplot(lim, aes(x = Limit, y = Total.service.cost, fill = Approach))
p_lim_c <- p_lim_c + geom_boxplot(color = "grey", alpha = 1/10)
p_lim_c <- p_lim_c + geom_smooth(method = "loess", se=FALSE, aes(group = Approach, color = Approach))
p_lim_c <- p_lim_c + scale_x_discrete()
p_lim_c <- p_lim_c + my_theme()
p_lim_c <- p_lim_c + scale_fill_manual(values = c("#D55E00", "#56B4E9"))
p_lim_c <- p_lim_c + scale_color_manual(values = c("#D55E00", "#56B4E9"))
p_lim_c <- p_lim_c + labs(x = "Max. Degree m")
p_lim_c <- p_lim_c + labs(y = "Service Cost (m)")
p_lim_c
my_theme <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 1),
#legend.position      = c(1, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
p_lim_t <- ggplot(lim, aes(x = Limit, y = Elapsed.time, fill = Approach))
p_lim_t <- p_lim_t + geom_boxplot(color = "grey", alpha = 1/10)
p_lim_t <- p_lim_t + geom_smooth(method = "loess", se=FALSE, aes(group = Approach, color = Approach))
p_lim_t <- p_lim_t + scale_x_discrete()
p_lim_t <- p_lim_t + scale_y_log10()
p_lim_t <- p_lim_t + my_theme()
p_lim_t <- p_lim_t + scale_fill_manual(values = c("#D55E00", "#56B4E9"))
p_lim_t <- p_lim_t + scale_color_manual(values = c("#D55E00", "#56B4E9"))
p_lim_t <- p_lim_t + labs(x = "Max. Degree m")
p_lim_t <- p_lim_t + labs(y = "Processing Time (s)")
p_lim_t
multiplot(p_lim_c, p_lim_t, cols = 1)
p_cus_c <- ggplot(cus, aes(x = Customers, y = Total.service.cost, fill = Approach))
p_cus_c <- p_cus_c + geom_boxplot()
p_cus_c <- p_cus_c + scale_x_discrete()
p_cus_c <- p_cus_c + scale_y_log10()
p_cus_c <- p_cus_c + my_theme()
p_cus_c <- p_cus_c + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_cus_c <- p_cus_c + labs(y = "Service Cost")
p_cus_c
my_theme <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 1),
legend.position      = c(1, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
p_ird_r_c <- ggplot(ird_r, aes(x = Ratio, y = Total.service.cost, fill = Approach))
p_ird_r_c <- p_ird_r_c + geom_boxplot()
p_ird_r_c <- p_ird_r_c + scale_x_discrete()
#p_ird_r_c <- p_ird_r_c + scale_y_log10()
p_ird_r_c <- p_ird_r_c + my_theme()
p_ird_r_c <- p_ird_r_c + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_ird_r_c <- p_ird_r_c + labs(y = "Service Cost (m)")
p_ird_r_c
my_theme_11 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 1),
legend.position      = c(1, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_10 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 0),
legend.position      = c(1, 0),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_01 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(0, 1),
legend.position      = c(0, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_00 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(0, 0),
legend.position      = c(0, 0),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_none <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 1),
#legend.position      = c(1, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
p_cus_c <- ggplot(cus, aes(x = Customers, y = Total.service.cost, fill = Approach))
p_cus_c <- p_cus_c + geom_boxplot()
p_cus_c <- p_cus_c + scale_x_discrete()
p_cus_c <- p_cus_c + scale_y_log10()
p_cus_c <- p_cus_c + my_theme_none()
p_cus_c <- p_cus_c + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_cus_c <- p_cus_c + labs(y = "Service Cost")
p_cus_c
p_cus_c <- ggplot(cus, aes(x = Customers, y = Total.service.cost, fill = Approach))
p_cus_c <- p_cus_c + geom_boxplot()
p_cus_c <- p_cus_c + scale_x_discrete()
p_cus_c <- p_cus_c + scale_y_log10()
p_cus_c <- p_cus_c + my_theme_none()
p_cus_c <- p_cus_c + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_cus_c <- p_cus_c + labs(y = "Service Cost (m)")
p_cus_c
multiplot(p_ird_r_c, p_cus_c, cols = 1)
p_milp_c <- ggplot(milp_prop_dt, aes(x = Customers, y = Total.service.cost))
p_milp_c <- p_milp_c + geom_boxplot(fill = "#56B4E9")
p_milp_c <- p_milp_c + scale_x_discrete()
p_milp_c <- p_milp_c + scale_y_continuous(breaks = c(1.0, 1.25, 1.5, 1.75, 2.0))
p_milp_c <- p_milp_c + geom_hline(yintercept=1.0, linetype="twodash", color = "red", size = 1)
p_milp_c <- p_milp_c + my_theme()
p_milp_c <- p_milp_c + labs(y = "Proportion MILP Service Cost")
p_milp_c
p_milp_t <- ggplot(milp_prop_dt, aes(x = Customers, y = Elapsed.time))
p_milp_t <- p_milp_t + geom_boxplot(fill = "#56B4E9")
p_milp_t <- p_milp_t + scale_x_discrete()
p_milp_t <- p_milp_t + scale_y_log10()
p_milp_t <- p_milp_t + my_theme()
p_milp_t <- p_milp_t + labs(y = "Proportion MILP Processing Time")
p_milp_t
multiplot(p_milp_c, p_milp_t, cols = 1)
p_ird_r_d <- ggplot(ird_r, aes(x = Ratio, y = Avg.detour, fill = Approach))
p_ird_r_d <- p_ird_r_d + geom_boxplot()
p_ird_r_d <- p_ird_r_d + scale_x_discrete()
p_ird_r_d <- p_ird_r_d + my_theme_01()
p_ird_r_d <- p_ird_r_d + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_ird_r_d <- p_ird_r_d + labs(y = "Average Detour")
p_ird_r_d
p_ird_r_d <- p_ird_r_d + labs(y = "Average Detour (times dist())")
p_ird_r_d
p_ird_r_d <- p_ird_r_d + labs(y = "Average Detour (x dist())")
p_ird_r_d
p_ird_r_d <- p_ird_r_d + labs(y = "Average Detour (times orig. dist.)")
p_ird_r_d
p_ird_r_d <- ggplot(ird_r, aes(x = Ratio, y = Avg.detour, fill = Approach))
p_ird_r_d <- p_ird_r_d + geom_boxplot()
p_ird_r_d <- p_ird_r_d + scale_x_discrete()
p_ird_r_d <- p_ird_r_d + my_theme_01()
p_ird_r_d <- p_ird_r_d + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_ird_r_d <- p_ird_r_d + labs(y = "Avg. Detour (times orig. dist.)")
p_ird_r_d
p_spar_f_c <- ggplot(spar[Partition == 'SP-fraction'], aes(x = Parameter, y = Total.service.cost, fill = Approach))
p_spar_f_c <- p_spar_f_c + geom_boxplot()
p_spar_f_c <- p_spar_f_c + scale_x_discrete()
#p_lim_c <- p_lim_c + scale_y_log10()
p_spar_f_c <- p_spar_f_c + my_theme_none()
p_spar_f_c <- p_spar_f_c + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_f_c <- p_spar_f_c + labs(x = "Fraction f")
p_spar_f_c <- p_spar_f_c + labs(y = "Service Cost")
p_spar_f_c
p_spar_f_t <- ggplot(spar[Partition == 'SP-fraction'], aes(x = Parameter, y = Elapsed.time, fill = Approach))
p_spar_f_t <- p_spar_f_t + geom_boxplot()
p_spar_f_t <- p_spar_f_t + scale_x_discrete()
p_spar_f_t <- p_spar_f_t + scale_y_log10()
p_spar_f_t <- p_spar_f_t + my_theme_none()
p_spar_f_t <- p_spar_f_t + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_f_t <- p_spar_f_t + labs(x = "Fraction f")
p_spar_f_t <- p_spar_f_t + labs(y = "Processing Time")
p_spar_f_t
p_spar_f_d <- ggplot(spar[Partition == 'SP-fraction'], aes(x = Parameter, y = Avg.detour, fill = Approach))
p_spar_f_d <- p_spar_f_d + geom_boxplot()
p_spar_f_d <- p_spar_f_d + scale_x_discrete()
#p_spar_d <- p_spar_d + scale_y_log10()
p_spar_f_d <- p_spar_f_d + my_theme_none()
p_spar_f_d <- p_spar_f_d + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_f_d <- p_spar_f_d + labs(x = "Fraction f")
p_spar_f_d <- p_spar_f_d + labs(y = "Average Detour")
p_spar_f_d
p_spar_f_sc <- ggplot(spar[Partition == 'SP-fraction'], aes(x = Parameter, y = Served, fill = Approach))
p_spar_f_sc <- p_spar_f_sc + geom_boxplot()
p_spar_f_sc <- p_spar_f_sc + scale_x_discrete()
#p_spar_d <- p_spar_d + scale_y_log10()
p_spar_f_sc <- p_spar_f_sc + my_theme_none()
p_spar_f_sc <- p_spar_f_sc + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_f_sc <- p_spar_f_sc + labs(x = "Fraction f")
p_spar_f_sc <- p_spar_f_sc + labs(y = "Served Customers")
p_spar_f_sc
p_spar_f_c <- ggplot(spar[Partition == 'SP-fraction'], aes(x = Parameter, y = Total.service.cost, fill = Approach))
p_spar_f_c <- p_spar_f_c + geom_boxplot()
p_spar_f_c <- p_spar_f_c + scale_x_discrete()
#p_lim_c <- p_lim_c + scale_y_log10()
p_spar_f_c <- p_spar_f_c + my_theme_none()
p_spar_f_c <- p_spar_f_c + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_f_c <- p_spar_f_c + labs(x = "Fraction f")
p_spar_f_c <- p_spar_f_c + labs(y = "Service Cost (m)")
p_spar_f_c
p_spar_f_t <- ggplot(spar[Partition == 'SP-fraction'], aes(x = Parameter, y = Elapsed.time, fill = Approach))
p_spar_f_t <- p_spar_f_t + geom_boxplot()
p_spar_f_t <- p_spar_f_t + scale_x_discrete()
p_spar_f_t <- p_spar_f_t + scale_y_log10()
p_spar_f_t <- p_spar_f_t + my_theme_none()
p_spar_f_t <- p_spar_f_t + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_f_t <- p_spar_f_t + labs(x = "Fraction f")
p_spar_f_t <- p_spar_f_t + labs(y = "Processing Time (s)")
p_spar_f_t
p_spar_f_d <- ggplot(spar[Partition == 'SP-fraction'], aes(x = Parameter, y = Avg.detour, fill = Approach))
p_spar_f_d <- p_spar_f_d + geom_boxplot()
p_spar_f_d <- p_spar_f_d + scale_x_discrete()
#p_spar_d <- p_spar_d + scale_y_log10()
p_spar_f_d <- p_spar_f_d + my_theme_none()
p_spar_f_d <- p_spar_f_d + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_f_d <- p_spar_f_d + labs(x = "Fraction f")
p_spar_f_d <- p_spar_f_d + labs(y = "Avg. Detour (times orig. dist.)")
p_spar_f_d
p_spar_f_sc <- ggplot(spar[Partition == 'SP-fraction'], aes(x = Parameter, y = Served, fill = Approach))
p_spar_f_sc <- p_spar_f_sc + geom_boxplot()
p_spar_f_sc <- p_spar_f_sc + scale_x_discrete()
#p_spar_d <- p_spar_d + scale_y_log10()
p_spar_f_sc <- p_spar_f_sc + my_theme_none()
p_spar_f_sc <- p_spar_f_sc + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_f_sc <- p_spar_f_sc + labs(x = "Fraction f")
p_spar_f_sc <- p_spar_f_sc + labs(y = "Served Customers")
p_spar_c <- ggplot(spar[Partition == 'SP-threshold'], aes(x = Parameter, y = Total.service.cost, fill = Approach))
p_spar_c <- p_spar_c + geom_boxplot()
p_spar_c <- p_spar_c + scale_x_discrete()
#p_lim_c <- p_lim_c + scale_y_log10()
p_spar_c <- p_spar_c + my_theme_none()
p_spar_c <- p_spar_c + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_c <- p_spar_c + labs(x = "Threshold t")
p_spar_c <- p_spar_c + labs(y = "Service Cost (m)")
p_spar_c
p_spar_t <- ggplot(spar[Partition == 'SP-threshold'], aes(x = Parameter, y = Elapsed.time, fill = Approach))
p_spar_t <- p_spar_t + geom_boxplot()
p_spar_t <- p_spar_t + scale_x_discrete()
p_spar_t <- p_spar_t + scale_y_log10()
p_spar_t <- p_spar_t + my_theme_none()
p_spar_t <- p_spar_t + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_t <- p_spar_t + labs(x = "Threshold t")
p_spar_t <- p_spar_t + labs(y = "Processing Time (s)")
p_spar_t
p_spar_d <- ggplot(spar[Partition == 'SP-threshold'], aes(x = Parameter, y = Avg.detour, fill = Approach))
p_spar_d <- p_spar_d + geom_boxplot()
p_spar_d <- p_spar_d + scale_x_discrete()
#p_spar_d <- p_spar_d + scale_y_log10()
p_spar_d <- p_spar_d + my_theme_none()
p_spar_d <- p_spar_d + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_d <- p_spar_d + labs(x = "Threshold t")
p_spar_d <- p_spar_d + labs(y = "Avg. Detour (times orig. dist.)")
p_spar_d
p_spar_sc <- ggplot(spar[Partition == 'SP-threshold'], aes(x = Parameter, y = Served, fill = Approach))
p_spar_sc <- p_spar_sc + geom_boxplot()
p_spar_sc <- p_spar_sc + scale_x_discrete()
#p_spar_d <- p_spar_d + scale_y_log10()
p_spar_sc <- p_spar_sc + my_theme_none()
p_spar_sc <- p_spar_sc + scale_fill_manual(values = c("#F0E442", "#D55E00", "#009E73", "#56B4E9"))
p_spar_sc <- p_spar_sc + labs(x = "Threshold t")
p_spar_sc <- p_spar_sc + labs(y = "Served Customers")
multiplot(p_spar_f_c, p_spar_f_t, p_spar_f_d, p_spar_sc, p_spar_c, p_spar_t, p_spar_d, p_spar_f_sc, cols = 2)
multiplot(p_lim_t, p_lim_c, cols = 2)
multiplot(p_lim_c, p_lim_t, cols = 2)
multiplot(p_lim_c, p_lim_t, cols = 1)
multiplot(p_milp_c, p_milp_t, cols = 2)
multiplot(p_ird_r_c, p_cus_c, cols = 2)
multiplot(p_cus_c, p_ird_r_c, cols = 2)
