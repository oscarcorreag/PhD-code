library(data.table)
library(ggplot2)
setwd("C:/Users/oscarcg/Documents/phd/code/Pickup-Delivery/test/files/final/")
# setwd("../Pickup-Delivery/test/files.final/")
my_theme_11 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 1),
legend.position      = c(1, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 11, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_10 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 0),
legend.position      = c(1, 0),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 11, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_01 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(0, 1),
legend.position      = c(0, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 11, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_00 <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(0, 0),
legend.position      = c(0, 0),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 11, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
my_theme_none <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
legend.position      = "none",
#legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.background    = element_rect(color = "grey"),
legend.justification = c(1, 1),
#legend.position      = c(1, 1),
#legend.title         = element_text(size = 9, lineheight = 0.9, colour = "black", hjust = 1, face="bold"),
legend.title         = element_blank(),
legend.text          = element_text(size = 11, lineheight = 0.9, colour = "black", hjust = 1),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
#axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 9, vjust = 0.5, face="bold"),
axis.title.x = element_text(margin = margin(t = 5, r = 0, b = 0, l = 0), size = 12, vjust = 0.5),
#axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 9, angle = 90, vjust = 0.5, face="bold"),
axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 12, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 10, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
cdcrss <- fread("Model.csv")
cdcrss[, Assignment := as.factor(Assignment)]
cdcrss[, Partition := as.factor(Partition)]
cdcrss[, Routing := as.factor(Routing)]
cdcrss[, Zone := as.factor(Zone)]
cdcrss[, Prop.served := Served / Customers]
cdcrss[, Customers := as.factor(Customers)]
cdcrss[, Ratio := as.factor(Ratio)]
cdcrss[, Distribution := as.factor(Distribution)]
cdcrss[, Limit := as.factor(Limit)]
cdcrss[, Parameter := as.factor(Parameter)]
cdcrss[, Classical := as.factor(Classical)]
cdcrss[Classical == 1, Classical := "Current"]
cdcrss[Classical == 0, Classical := "CD-CRSS"]
cdcrss <- cdcrss[Cost != -1]
cdcrss[Assignment == 'SP-Voronoi', Assignment := 'V']
cdcrss[Assignment == 'LL-EP', Assignment := 'DIST(ra)']
cdcrss[Routing == 'BB', Routing := 'BnB']
cdcrss[, Approach := paste(Assignment, Routing, sep = "-")]
cdcrss$Approach <- factor(cdcrss$Approach, levels = c('V-NN', 'DIST(ra)-NN', 'V-BnB', 'DIST(ra)-BnB'))
cdcrss[, Total.service.cost := Dedicated.cost + Service.cost]
cdcrss_prop_f <- function(sd) {
baseline <- sd[Classical == "Current", -1, with = FALSE]
other <- sd[Classical == "CD-CRSS", -1, with = FALSE]
if(nrow(baseline) == 1 & nrow(other) == 1){
other[1] / baseline[1]
}
}
sd_cols_cdcrss <- c("Classical", "Cost", "Service.cost", "Total.service.cost")
cdcrss_prop_dt <- cdcrss[, cdcrss_prop_f(.SD), by = list(Seed, Customers, Approach, Stores), .SDcols = sd_cols_cdcrss]
retpref_cust <- fread("RetailerPref_Cust.csv")
retpref_cust[, Assignment := as.factor(Assignment)]
retpref_cust[, Partition := as.factor(Partition)]
retpref_cust[, Routing := as.factor(Routing)]
retpref_cust[, Zone := as.factor(Zone)]
retpref_cust[, Prop.served := Served / Customers]
retpref_cust[, Customers := as.factor(Customers)]
retpref_cust[, Ratio := as.factor(Ratio)]
retpref_cust[, Distribution := as.factor(Distribution)]
retpref_cust[, Limit := as.factor(Limit)]
retpref_cust[, Parameter := as.factor(Parameter)]
retpref_cust[, Retailer.pref := as.factor(Retailer.pref)]
retpref_cust <- retpref_cust[Cost != -1]
retpref_cust[Assignment == 'SP-Voronoi', Assignment := 'V']
retpref_cust[Assignment == 'LL-EP', Assignment := 'DIST(ra)']
retpref_cust[Routing == 'BB', Routing := 'BnB']
retpref_cust[, Approach := paste(Assignment, Routing, sep = "-")]
retpref_cust$Approach <- factor(retpref_cust$Approach, levels = c('V-NN', 'DIST(ra)-NN', 'V-BnB', 'DIST(ra)-BnB'))
retpref_cust[, Total.service.cost := Dedicated.cost + Service.cost]
retpref_cust_prop_dt <- retpref_cust[(Classical == TRUE & Retailer.pref == "market_share") | (Classical == FALSE & Retailer.pref == "neighbour_driver_pref"), retpref_prop_f(.SD), by = list(Seed, Customers), .SDcols = sd_cols_retpref]
retpref_prop_f <- function(sd) {
baseline <- sd[Classical == TRUE & Retailer.pref == "market_share", -(1:2), with = FALSE]
other <- sd[Classical == FALSE & Retailer.pref == "neighbour_driver_pref", -(1:2), with = FALSE]
if(nrow(baseline) == 1 & nrow(other) == 1){
other[1] / baseline[1]
}
}
sd_cols_retpref <- c("Classical", "Retailer.pref", "Cost", "Service.cost", "Total.service.cost")
retpref_cust <- fread("RetailerPref_Cust.csv")
retpref_cust[, Assignment := as.factor(Assignment)]
retpref_cust[, Partition := as.factor(Partition)]
retpref_cust[, Routing := as.factor(Routing)]
retpref_cust[, Zone := as.factor(Zone)]
retpref_cust[, Prop.served := Served / Customers]
retpref_cust[, Customers := as.factor(Customers)]
retpref_cust[, Ratio := as.factor(Ratio)]
retpref_cust[, Distribution := as.factor(Distribution)]
retpref_cust[, Limit := as.factor(Limit)]
retpref_cust[, Parameter := as.factor(Parameter)]
retpref_cust[, Retailer.pref := as.factor(Retailer.pref)]
retpref_cust <- retpref_cust[Cost != -1]
retpref_cust[Assignment == 'SP-Voronoi', Assignment := 'V']
retpref_cust[Assignment == 'LL-EP', Assignment := 'DIST(ra)']
retpref_cust[Routing == 'BB', Routing := 'BnB']
retpref_cust[, Approach := paste(Assignment, Routing, sep = "-")]
retpref_cust$Approach <- factor(retpref_cust$Approach, levels = c('V-NN', 'DIST(ra)-NN', 'V-BnB', 'DIST(ra)-BnB'))
retpref_cust[, Total.service.cost := Dedicated.cost + Service.cost]
retpref_cust_prop_dt <- retpref_cust[(Classical == TRUE & Retailer.pref == "market_share") | (Classical == FALSE & Retailer.pref == "neighbour_driver_pref"), retpref_prop_f(.SD), by = list(Seed, Customers), .SDcols = sd_cols_retpref]
retpref_cust_prop_dt[, Approach := ""]
retpref_cust_prop_dt[, Stores := 0]
retpref_cust_prop_dt[, Approach_2 := "Amazon model"]
cdcrss_prop_dt[, Approach_2 := "Retailer specific"]
shec_2 <- rbind(cdcrss_prop_dt[Approach == "DIST(ra)-BnB" & Stores >= 5], retpref_cust_prop_dt)
p_retpref_cust_prop_c <- ggplot(shec_2, aes(x = Customers, y = Total.service.cost, fill = Approach_2))
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + geom_boxplot()
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + scale_x_discrete()
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + geom_hline(yintercept=.8, linetype="twodash", color = "blue", size = 1)
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + geom_hline(yintercept=.5, linetype="twodash", color = "red", size = 1)
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + my_theme_11()
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + theme(axis.text = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1), axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 10, angle = 90, vjust = 0.5))
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + labs(x = "Ratio customers / drivers")
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + labs(y = "Times Current Model Service Cost")
p_retpref_cust_prop_c
lim <- fread("Degree.csv")
lim[, Assignment := as.factor(Assignment)]
lim[, Partition := as.factor(Partition)]
lim[, Routing := as.factor(Routing)]
lim[, Zone := as.factor(Zone)]
lim[, Customers := as.factor(Customers)]
lim[, Ratio := as.factor(Ratio)]
lim[, Distribution := as.factor(Distribution)]
lim[, Limit := as.factor(Limit)]
lim[, Parameter := as.factor(Parameter)]
lim <- lim[Dedicated.cost == 0 & Cost != -1 & Limit %in% c(4, 6, 8, 10, 12)]
lim[Assignment == 'SP-Voronoi', Assignment := 'V']
lim[Assignment == 'LL-EP', Assignment := 'DIST[ra]']
lim[Routing == 'BB', Routing := 'BnB']
lim[, Approach := paste(Assignment, Routing, sep = "-")]
lim$Approach <- factor(lim$Approach, levels = c('V-NN', 'DIST[ra]-NN', 'V-BnB', 'DIST[ra]-BnB'))
lim[, Total.service.cost := Dedicated.cost + Service.cost]
lab1 <- c(expression(dist[ra]-NN), expression(dist[ra]-BnB))
p_lim_c <- ggplot(lim, aes(x = Limit, y = Total.service.cost, fill = Approach))
p_lim_c <- p_lim_c + geom_boxplot(color = "grey", alpha = 1/10)
p_lim_c <- p_lim_c + geom_smooth(method = "loess", se=FALSE, aes(group = Approach, color = Approach))
p_lim_c <- p_lim_c + geom_vline(xintercept=8, linetype="twodash", color = "red", size = 1)
p_lim_c <- p_lim_c + scale_x_discrete()
p_lim_c <- p_lim_c + my_theme_11()
p_lim_c <- p_lim_c + scale_fill_manual(values = c("#D55E00", "#56B4E9"), labels = lab1)
p_lim_c <- p_lim_c + scale_color_manual(values = c("#D55E00", "#56B4E9"), labels= lab1)
p_lim_c <- p_lim_c + labs(x = "Max. Degree m")
p_lim_c <- p_lim_c + labs(y = "Service Cost (m)")
p_lim_c
p_retpref_cust_prop_c <- ggplot(shec_2, aes(x = Customers, y = Total.service.cost, fill = Approach_2))
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + geom_boxplot()
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + scale_x_discrete()
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + scale_y_continuous(breaks = c(.25, .5, .75, .8, 1., 1.25))
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + geom_hline(yintercept=.8, linetype="twodash", color = "blue", size = 1)
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + geom_hline(yintercept=.5, linetype="twodash", color = "red", size = 1)
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + my_theme_11()
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + theme(axis.text = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1), axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 10, angle = 90, vjust = 0.5))
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + labs(x = "Ratio customers / drivers")
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + labs(y = "Times Current Model Service Cost")
p_retpref_cust_prop_c
retpref_cust <- fread("RetailerPref_Cust.csv")
retpref_cust[, Assignment := as.factor(Assignment)]
retpref_cust[, Partition := as.factor(Partition)]
retpref_cust[, Routing := as.factor(Routing)]
retpref_cust[, Zone := as.factor(Zone)]
retpref_cust[, Prop.served := Served / Customers]
retpref_cust[, Customers := as.factor(Customers)]
retpref_cust[, Ratio := as.factor(Ratio)]
retpref_cust[, Distribution := as.factor(Distribution)]
retpref_cust[, Limit := as.factor(Limit)]
retpref_cust[, Parameter := as.factor(Parameter)]
retpref_cust[, Retailer.pref := as.factor(Retailer.pref)]
retpref_cust <- retpref_cust[Cost != -1]
retpref_cust[Assignment == 'SP-Voronoi', Assignment := 'V']
retpref_cust[Assignment == 'LL-EP', Assignment := 'DIST(ra)']
retpref_cust[Routing == 'BB', Routing := 'BnB']
retpref_cust[, Approach := paste(Assignment, Routing, sep = "-")]
retpref_cust$Approach <- factor(retpref_cust$Approach, levels = c('V-NN', 'DIST(ra)-NN', 'V-BnB', 'DIST(ra)-BnB'))
retpref_cust[, Total.service.cost := Dedicated.cost + Service.cost]
retpref_cust_prop_dt <- retpref_cust[(Classical == TRUE & Retailer.pref == "market_share") | (Classical == FALSE & Retailer.pref == "neighbour_driver_pref"), retpref_prop_f(.SD), by = list(Seed, Customers), .SDcols = sd_cols_retpref]
retpref_cust_prop_dt[, Approach := ""]
retpref_cust_prop_dt[, Stores := 0]
retpref_cust_prop_dt[, Approach_2 := "Amazon model"]
cdcrss_prop_dt[, Approach_2 := "Retailer specific"]
shec_2 <- rbind(cdcrss_prop_dt[Approach == "DIST(ra)-BnB" & Stores >= 5], retpref_cust_prop_dt)
p_retpref_cust_prop_c <- ggplot(shec_2, aes(x = Customers, y = Total.service.cost, fill = Approach_2))
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + geom_boxplot()
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + scale_x_discrete()
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + scale_y_continuous(breaks = c(.25, .5, .75, .8, 1., 1.25))
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + geom_hline(yintercept=.8, linetype="twodash", color = "blue", size = 1)
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + geom_hline(yintercept=.5, linetype="twodash", color = "red", size = 1)
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + my_theme_11()
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + theme(axis.text = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1), axis.title.y = element_text(margin = margin(t = 0, r = 5, b = 0, l = 0), size = 10, angle = 90, vjust = 0.5))
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + labs(x = "Ratio customers / drivers")
p_retpref_cust_prop_c <- p_retpref_cust_prop_c + labs(y = "Times Current Model Service Cost")
p_retpref_cust_prop_c
