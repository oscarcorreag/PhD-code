from unittest import TestCase
from grid_digraph_generator import GridDigraphGenerator
from csdp_ap import CsdpAp, sample


class TestCsdpAp(TestCase):

    def test_solve(self):
        generator = GridDigraphGenerator()
        graph = generator.generate(30, 30, edge_weighted=True)
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # DETERMINISTIC REQUESTS
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        rs = [
            ([(691, 1, 300), (603, 1, 300)], (398, 1, 300)),
            ([(718, 1, 300)], (445, 1, 300)),
            ([(718, 1, 300)], (576, 1, 300)),
        ]
        #
        vs = [((549, 1, 300), (535, 1, 300))]

        csdp_ap = CsdpAp(graph)
        # --------------------------------------------------------------------------------------------------------------
        # SP-based -> Partition='SP-fraction' -> fraction_sd=0.5
        # --------------------------------------------------------------------------------------------------------------
        routes, cost = csdp_ap.solve(rs, vs, method='SP-based', fraction_sd=0.5)
        self.assertAlmostEqual(cost, 34.79116518008293, 2)
        self.assertListEqual(routes,
                             [[549, 579, 580, 581, 582, 583, 584, 585, 586, 616, 617, 618, 619, 620, 590, 591, 592, 622,
                               623, 653, 654, 655, 625, 626, 627, 657, 658, 659, 689, 719, 718, 719, 689, 659, 629, 599,
                               569, 539, 509, 508, 478, 477, 476, 475, 445, 444, 474, 504, 534, 535],
                              [718, 719, 689, 659, 658, 657, 627, 626, 625, 655, 654, 653, 623, 622, 592, 591, 590, 620,
                               619, 618, 617, 616, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 577, 578, 579,
                               580, 581, 582, 583, 584, 585, 586, 616, 617, 618, 619, 620, 590, 591, 592, 622, 623, 653,
                               654, 655, 625, 626, 627, 657, 658, 659, 689, 719, 718],
                              [603, 573, 574, 575, 545, 546, 547, 517, 518, 519, 489, 459, 429, 399, 398, 399, 429, 459,
                               489, 519, 518, 517, 547, 546, 545, 575, 574, 573, 603]]
                             )
        # --------------------------------------------------------------------------------------------------------------
        # SP-based -> Partition='SP-Voronoi'
        # --------------------------------------------------------------------------------------------------------------
        routes, cost = csdp_ap.solve(rs, vs, method='SP-based', partition_method='SP-Voronoi')
        self.assertAlmostEquals(cost, 27.970369551096667, 2)
        self.assertListEqual(routes,
                             [[549, 579, 580, 581, 582, 583, 584, 585, 586, 616, 617, 618, 619, 620, 590, 591, 592, 622,
                               623, 653, 654, 655, 625, 626, 627, 657, 658, 659, 689, 719, 718, 719, 689, 659, 658, 657,
                               627, 626, 625, 655, 654, 653, 623, 622, 592, 591, 590, 620, 619, 618, 617, 616, 586, 585,
                               584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 603, 573, 574, 575, 545, 546,
                               547, 517, 518, 519, 489, 459, 429, 399, 398, 399, 400, 401, 371, 372, 373, 374, 375, 376,
                               406, 407, 377, 378, 379, 380, 381, 411, 412, 413, 414, 415, 445, 444, 474, 504, 534,
                               535]])
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # RANDOM REQUESTS
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        rs, ss, cs, vs = sample(nc=10, ng=3, min_s=5, max_s=10, nv=4, vertices=graph.keys(), seed=0)
        # --------------------------------------------------------------------------------------------------------------
        # SP-based -> Partition='SP-Voronoi'
        # --------------------------------------------------------------------------------------------------------------
        _, cost = csdp_ap.solve(rs, vs, method='SP-based', partition_method='SP-Voronoi')
        self.assertAlmostEquals(cost, 89.87362037129785, 2)
        # --------------------------------------------------------------------------------------------------------------
        # SP-based -> Partition='SP-threshold' -> threshold_sd=1.5
        # --------------------------------------------------------------------------------------------------------------
        _, cost = csdp_ap.solve(rs, vs, method='SP-based', partition_method='SP-threshold')
        self.assertAlmostEquals(cost, 85.26990465255884, 2)
        # --------------------------------------------------------------------------------------------------------------
        # SP-based -> Partition='SP-threshold' -> threshold_sd=1.6
        # --------------------------------------------------------------------------------------------------------------
        _, cost = csdp_ap.solve(rs, vs, method='SP-based', partition_method='SP-threshold', threshold_sd=1.6)
        self.assertAlmostEquals(cost, 81.33536792139567, 2)
        # --------------------------------------------------------------------------------------------------------------
        # SP-based -> Partition='SP-threshold' -> threshold_sd=1.7
        # --------------------------------------------------------------------------------------------------------------
        _, cost = csdp_ap.solve(rs, vs, method='SP-based', partition_method='SP-threshold', threshold_sd=1.7)
        self.assertAlmostEquals(cost, 81.33536792139567, 2)
        # --------------------------------------------------------------------------------------------------------------
        # SP-based -> Partition='SP-threshold' -> threshold_sd=1.8
        # --------------------------------------------------------------------------------------------------------------
        _, cost = csdp_ap.solve(rs, vs, method='SP-based', partition_method='SP-threshold', threshold_sd=1.8)
        self.assertAlmostEquals(cost, 81.33536792139567, 2)
        # --------------------------------------------------------------------------------------------------------------
        # SP-based -> Partition='SP-threshold' -> threshold_sd=1.9
        # --------------------------------------------------------------------------------------------------------------
        _, cost = csdp_ap.solve(rs, vs, method='SP-based', partition_method='SP-threshold', threshold_sd=1.9)
        self.assertAlmostEquals(cost, 84.13255599809892, 2)
        # --------------------------------------------------------------------------------------------------------------
        # SP-based -> Partition='SP-threshold' -> threshold_sd=2.0
        # --------------------------------------------------------------------------------------------------------------
        _, cost = csdp_ap.solve(rs, vs, method='SP-based', partition_method='SP-threshold', threshold_sd=2.0)
        self.assertAlmostEquals(cost, 86.5580839996466, 2)
