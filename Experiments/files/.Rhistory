setwd("C:/Users/oscarcg/Dropbox/Education/Unimelb PhD/code/Experiments/files/")
setwd("C:/Users/oscarcg/Documents/phd/code/Experiments/files/")
users <- read.csv("50 samples/users.csv", header = FALSE)
names(users) <- c("alg", "seed", "n_size", "hs_size", "u", "p", "cap", "samp", "e_time", "cost", "gr", "avg_dr", "num_cars", "avg_or")
pois <- read.csv("50 samples/POIs.csv", header = FALSE)
names(pois) <- c("alg", "seed", "n_size", "hs_size", "u", "p", "cap", "samp", "e_time", "cost", "gr", "avg_dr", "num_cars", "avg_or")
hotspots <- read.csv("50 samples/hotspots.csv", header = FALSE)
names(hotspots) <- c("alg", "seed", "n_size", "hs_size", "u", "p", "cap", "samp", "e_time", "cost", "gr", "avg_dr", "num_cars", "avg_or")
hotspots$prop <- 0
hotspots[with(hotspots, hs_size < 450), "prop"] <- 0.03
hotspots[with(hotspots, hs_size > 450 & hs_size < 900), "prop"] <- 0.06
hotspots[with(hotspots, hs_size > 900 & hs_size < 1850), "prop"] <- 0.12
#hotspots[with(hotspots, hs_size > 1300 & hs_size < 1750), "prop"] <- 0.5
hotspots[with(hotspots, hs_size > 1850), "prop"] <- 0.25
cap <- read.csv("50 samples/capacity.csv", header = FALSE)
names(cap) <- c("alg", "seed", "n_size", "hs_size", "u", "p", "cap", "samp", "e_time", "cost", "gr", "avg_dr", "num_cars", "avg_or")
n_size <- read.csv("50 samples/network.csv", header = FALSE)
names(n_size) <- c("alg", "seed", "n_size", "hs_size", "u", "p", "cap", "samp", "e_time", "cost", "gr", "avg_dr", "num_cars", "avg_or")
library(ggplot2)
my_theme <- function(base_size = 11, base_family = "") {
# Starts with theme_grey and then modify some parts
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(
# white panel with light grey border
panel.background = element_rect(fill = "white", colour = NA),
panel.border     = element_rect(fill = NA, colour = "grey70", size = 0.5),
# light grey, thinner gridlines
# => make them slightly darker to keep acceptable contrast
#panel.grid.major = element_line(colour = "grey87", size = 0.25),
#panel.grid.minor = element_line(colour = "grey87", size = 0.125),
# match axes ticks thickness to gridlines and colour to panel border
axis.ticks       = element_line(colour = "grey70", size = 0.25),
# match legend key to panel.background
#legend.key           = element_rect(fill = "white", colour = NA),
#legend.position      = "none",
legend.background    = element_rect(fill = "white", size = 4, colour = "white"),
legend.justification = c(0, 0),
legend.position      = c(0, 0),
#legend.title         = element_blank(),
#legend.text           = element_text(size = 8, lineheight = 0.9, hjust = 1),
#legend.title          = element_text(size = 9),
# dark strips with light text (inverse contrast compared to theme_grey)
strip.background = element_rect(fill = "grey70", colour = NA),
strip.text       = element_text(colour = "white", size = rel(0.8)),
#axis.title.x = axis_x_title,
#axis.title.y = axis_y_title,
axis.title.x = element_text(size = 9, vjust = 0.5),
axis.title.y = element_text(size = 9, angle = 90, vjust = 0.5),
#axis.text    = element_text(size = 8, lineheight = 0.9, colour = "grey50", hjust = 1),
axis.text    = element_text(size = 8, lineheight = 0.9, colour = "black", hjust = 1),
complete = TRUE
)
}
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(scales)
setwd("C:/Users/oscarcg/Documents/phd/code/Experiments/files/")
library(ggplot2)
mrb <- read.csv("80 POIs/maribyrnong_3.csv", header = FALSE)
names(mrb) <- c("sa3_code", "dh", "act", "cost", "gr", "avg_dr", "num_cars", "avg_or", "e_time", "id", "Algorithm", "hs_size", "u", "p", "n_size")
mrb$act <- factor(mrb$act, labels = c("Shopping Centre", "Supermarket", "Food store", "Fast food", "Convenience store", "Pub or bar", "Swimming pool"))
mrb[mrb$gr > 10, "gr"] <- NA
# To study frequency of most used meeting points between two methods: meet anywhere vs hot-spots only
mrb_wh_v_woh <- read.csv("maribyrnong/results_24May2017_193731.csv", header = FALSE)
names(mrb_wh_v_woh) <- c("ord", "hotspot_use", "sa3_code", "dh", "act", "cost", "gr", "avg_dr", "num_cars", "avg_or", "e_time", "hs_size", "u", "p", "n_size")
mrb_wh_v_woh$act <- factor(mrb_wh_v_woh$act, labels = c("Shopping Centre", "Supermarket", "Food store", "Fast food", "Convenience store", "Pub or bar", "Swimming pool"))
mrb_wh_v_woh[mrb_wh_v_woh$gr > 10, "gr"] <- NA
mrb_wh_v_woh$sample <- rep(1:170, each=2)
lsv <- read.csv("maribyrnong/lsv_24May2017_193731.csv", header = FALSE)
names(lsv) <- c("ord", "sv", "t", "dist")
merged <- merge(mrb_wh_v_woh, lsv)
library(data.table)
dt_merged <- data.table(merged)
by_sv <- dt_merged[,list(num_people=.N), by=.(act, dh, p, u, hs_size, sample, hotspot_use, sv)]
by_num_people <- by_sv[,list(freq=.N), by=.(act, dh, p, u, hs_size, sample, hotspot_use, num_people)]
library(ggplot2)
p1 <- ggplot(by_sv[act == "Supermarket" & dh == 9 & sample == 2], aes(x = num_people, fill = Algorithm))
p1 <- p1 + geom_histogram(binwidth = 1, position = "dodge")
p1
View(by_sv)
p2 <- ggplot(by_sv[act == "Shopping Centre"], aes(x = num_people, fill = hotspot_use))
p2 <- p2 + geom_histogram(binwidth = 1, position = "dodge")
p2 <- p2 + my_theme()
p2 <- p2 + labs(x="# People per meeting point", y="# Meeting points")
p2
p3 <- ggplot(by_num_people[act == "Shopping Centre" & freq > 2], aes(x = factor(num_people), y = freq, fill = hotspot_use))
p3 <- p3 + geom_boxplot()
p3 <- p3 + my_theme()
p3 <- p3 + scale_y_log10()
p3 <- p3 + labs(x="# People per meeting point", y="# Meeting points", fill="Hot-spots use")
p3
View(by_num_people)
by_num_people[act == "Shopping Centre" & freq > 2 & num_people > 5]
by_num_people[act == "Shopping Centre" & freq > 2]
max(by_num_people$num_people)
max(by_num_people[act == "Shopping Centre" & freq > 2]$num_people)
by_num_people[act == "Shopping Centre" & freq > 2 & num_people >= 5]
